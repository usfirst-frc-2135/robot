// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/LED.h"
#include <frc/smartdashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Led::Led() : frc::Subsystem("Led")
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Led::InitDefaultCommand()
{
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Led::Periodic()
{
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Led::Initialize()
{
    //Default to a length of 60, start empty output
    //Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLEDStringLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();


    // Add options for colors in SmartDashboard
    m_ledChooser.AddOption("LED_Off",    LEDCOLOR_OFF);
    m_ledChooser.AddOption("LED_White",  LEDCOLOR_WHITE);
    m_ledChooser.AddOption("LED_Red",    LEDCOLOR_RED);
    m_ledChooser.AddOption("LED_Orange", LEDCOLOR_ORANGE);
    m_ledChooser.AddOption("LED_Yellow", LEDCOLOR_YELLOW);
    m_ledChooser.AddOption("LED_Green",  LEDCOLOR_GREEN);
    m_ledChooser.AddOption("LED_Blue",   LEDCOLOR_BLUE);
    m_ledChooser.AddOption("LED_Purple", LEDCOLOR_PURPLE);

    frc::SmartDashboard::PutData("LED Color", &m_ledChooser);
}

// Send RGB values to change color of each LED in string
void Led::SendRGBToString(int rgbRed, int rgbGreen, int rgbBlue)
{
    for (int i = 0; i < kLEDStringLength; i++)
        m_ledBuffer[i].SetRGB(rgbRed, rgbGreen, rgbBlue);

    m_led.SetData(m_ledBuffer);
}

// Set color of LED string
void Led::SetColor(int color)
{
    const char *strName;

    switch(color)
    {
        default:
        case LEDCOLOR_OFF:
            strName = "OFF";
            SendRGBToString(0, 0, 0);         //black
            break;
        case LEDCOLOR_WHITE:
            strName = "WHITE";
            SendRGBToString(255, 255, 255);   //white
            break;
        case LEDCOLOR_RED:
            strName = "RED";
            SendRGBToString(255, 0, 0);       //red
            break;
        case LEDCOLOR_ORANGE:
            strName = "ORANGE";
            SendRGBToString(255, 80, 0);      //orange
            break;
        case LEDCOLOR_YELLOW:
            strName = "YELLOW";
            SendRGBToString(255, 255, 0);     //yellow
            break;
        case LEDCOLOR_GREEN:
            strName = "GREEN";
            SendRGBToString(0, 255, 0);       //green
            break;
        case LEDCOLOR_BLUE:
            strName = "BLUE";
            SendRGBToString(0, 0, 255);       //blue
            break;
        case LEDCOLOR_PURPLE:             // For Rithu
            strName = "PURPLE";
            SendRGBToString(255, 0, 255);     //purple
            break;
    }

    if (m_previousColor != color)
    {
        printf("2135: LED Color Set to %s\n", strName);
        m_previousColor = color;
    }
}

// Turn on LED when certain conditions are met
// TODO: (JLM) This function should go away, since DisplayColor replaces it
void Led::DetectPowerCell(bool powerCellOn)
{
    if (powerCellOn)
        SetColor(m_ledChooser.GetSelected());
    else
        SetColor(LEDCOLOR_OFF);
}

void Led::DisplayColor(LEDSource_e source, bool enable) {
    if (enable)
        m_sourceEnabled |= source;
    else
        m_sourceEnabled &= ~source;

    if (m_sourceEnabled & LEDSOURCE_SHOOTER)
        SetColor(m_shooterLEDColor);
    else if (m_sourceEnabled & LEDSOURCE_CONVEYOR)
        SetColor(m_conveyorLEDColor);
    else if (m_sourceEnabled & LEDSOURCE_COMMAND)
        SetColor(m_ledChooser.GetSelected());
    else
        SetColor(LEDCOLOR_OFF);
}
